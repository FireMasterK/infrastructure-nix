services:
  # Reddit frontend
  libreddit:
    image: spikecodes/libreddit:latest
    container_name: libreddit
    environment: 
      LIBREDDIT_DEFAULT_AUTOPLAY_VIDEOS: True
      LIBREDDIT_DEFAULT_FRONT_PAGE: popular
      LIBREDDIT_DEFAULT_SHOW_NSFW: True
      LIBREDDIT_DEFAULT_THEME: dracula
      LIBREDDIT_DEFAULT_USE_HLS: True
    ports:
      - "127.0.0.1:8083:8080"
    mem_limit: 256m
    memswap_limit: 256m
    restart: always

  # Twitter frontend
  nitter:
    image: zedeus/nitter:latest
    container_name: nitter
    volumes:
      - ./nitter/nitter.conf:/src/nitter.conf:ro
    mem_limit: 256m
    memswap_limit: 256m
    ports:
      - "127.0.0.1:8888:8888"
    depends_on:
      - nitter_redis
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:8080/Jack/status/20 || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    restart: always

  nitter_redis:
    image: redis:6-alpine
    container_name: nitter_redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - ./nitter/redis:/data
    mem_limit: 256m
    memswap_limit: 256m
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 5s
      retries: 2
    restart: always

  # Bibliogram
  bibliogram:
    image: quay.io/pussthecatorg/bibliogram:latest
    container_name: bibliogram
    volumes:
      - "./bibliogram/db:/app/db"
    mem_limit: 256m
    memswap_limit: 256m
    ports:
      - "127.0.0.1:10407:10407"
    restart: always

  # Lingva
  lingva:
    image: thedaviddelta/lingva-translate:latest
    container_name: lingva
    environment:
      DARK_THEME: True
      DEFAULT_SOURCE_LANG: auto
      DEFAULT_TARGET_LANG: en
      SITE_DOMAIN: lingva.garudalinux.org
    ports:
      - "3000:3000"
    restart: always

  # Teddit
  teddit:
    image: teddit/teddit:latest
    container_name: teddit
    depends_on:
      - teddit_redis
    environment:
      DOMAIN: teddit.garudalinux.org
      REDIS_HOST: teddit_redis
      THEME: dark
      TRUST_PROXY: True
    ports:
      - "127.0.0.1:8081:8080"
    mem_limit: 1024m
    memswap_limit: 1024m
    healthcheck:
      test: ["CMD", "wget" ,"--no-verbose", "--tries=1", "--spider", "http://localhost:8080/about"]
      interval: 1m
      timeout: 3s
    restart: always

  teddit_redis:
    image: redis:6.2.5-alpine
    container_name: teddit_redis
    command: redis-server
    environment:
      REDIS_REPLICATION_MODE: master
    mem_limit: 512m
    memswap_limit: 512m
    restart: always

  # Invious YouTube frontend
  invidious:
    image: quay.io/invidious/invidious:latest
    container_name: invidious
    depends_on:
      - invidious_db
    environment:
      INVIDIOUS_CONFIG: |
        db:
          dbname: invidious
          user: kemal
          password: ${INVIDIOUS_DB_PASSWORD:?err}
          host: invidious_db
          port: 5432
        check_tables: true
        default_user_preferences:
          local: true
          quality: dash
        admins: ["nico"]
        captcha_key: ${INVIDIOUS_CAPTCHA_KEY:?err}
        disable_proxy: ["livestreams","downloads"]
        domain: invidious.garudalinux.org
        external_port: 443
        hmac_key: ${INVIDIOUS_HMAC_KEY:?err}
        https_only: true
        popular_enabled: true
        statistics_enabled: true
        use_pubsub_feeds: true
        use_quic: true
    ports:
      - "127.0.0.1:3001:3000"
    mem_limit: 1024m
    memswap_limit: 1024m
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/comments/jNQXAC9IVRw || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    restart: always

  invidious_db:
    image: docker.io/library/postgres:14
    container_name: invidious_db
    volumes:
      - ./invidious/db:/var/lib/postgresql/data
      - ./invidious/config:/config/sql
      - ./invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: invidious
      POSTGRES_USER: kemal
      POSTGRES_PASSWORD: "${INVIDIOUS_DB_PASSWORD:?err}"
    mem_limit: 256m
    memswap_limit: 256m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    restart: always

  # Piped
  piped_backend:
    image: 1337kavin/piped:latest
    container_name: piped_backend
    depends_on:
      - piped_postgres
    volumes:
      - ./piped/config.properties:/app/config.properties:ro
    mem_limit: 2048m
    memswap_limit: 2048m
    restart: always

  piped_frontend:
    image: 1337kavin/piped-frontend:latest
    container_name: piped_frontend
    entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/piped-api.garudalinux.org/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'
    depends_on:
      - piped_backend
    mem_limit: 256m
    memswap_limit: 256m
    restart: always

  piped_nginx:
    image: nginx:mainline-alpine
    container_name: piped_nginx
    depends_on:
      - piped_backend
      - piped_frontend
      - ytproxy
    ports:
      - "127.0.0.1:8082:80"
    volumes:
      - ./piped/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./piped/config/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro
      - ./piped/config/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
      - ./piped/config/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro
      - ./piped/config/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
      -  ytproxy:/var/run/ytproxy
    mem_limit: 256m
    memswap_limit: 256m
    restart: always

  piped_postgres:
    image: postgres:13-alpine
    container_name: piped_postgres
    volumes:
      - ./piped/db:/var/lib/postgresql/data
    mem_limit: 256m
    memswap_limit: 256m
    environment:
      POSTGRES_DB: piped
      POSTGRES_PASSWORD: "${INVIDIOUS_DB_PASSWORD:?err}"
      POSTGRES_USER: piped
    restart: always

  ytproxy:
    image: 1337kavin/ytproxy:latest
    container_name: ytproxy
    volumes:
      - ytproxy:/app/socket
    mem_limit: 256m
    memswap_limit: 256m
    restart: always

volumes:
    ytproxy: null